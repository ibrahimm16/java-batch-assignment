import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class Week3Day12Solutions {

    public static void main(String[] args) {
        solution1Test();
        solution2Test();
        solution3Test();
    }

    // Solution 1
    static List<Employee> employeeSort(List<Employee> employees) {
        // Name comparator sorts the employees by name in descending order
        Comparator<Employee> nameComparator = Comparator.comparing(Employee::getName).reversed();
        // Age comparator sorts the employees by age in ascending order
        Comparator<Employee> ageComparator = Comparator.comparing(Employee::getAge);
        // returns a new list generated by sorting the employee list first in descending name order, then in ascending age order
        return employees.stream().sorted(nameComparator.thenComparing(ageComparator)).collect(Collectors.toList());
    }

    // Solution 2
    static List<List<Integer>> splitLists(List<Integer> list) {
        return new ArrayList<>(list.stream().collect(Collectors.partitioningBy(i -> (i % 2) == 0)).values());
    }

    // Solution 3
    static String charStreamToString(char[] chars) {
        // Converts the primitive char array to a boxed list
        List<Character> boxedList = new ArrayList<>();
        for (char c : chars)
            boxedList.add(c);
        // Creates a StringBuilder object to store the result of the stream
        StringBuilder stringBuilder = boxedList.stream().collect(StringBuilder::new, StringBuilder::append, StringBuilder::append);
        return stringBuilder.toString();
    }

    static void solution1Test() {
        System.out.println("Solution 1 output:");
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Ron", 20));
        employees.add(new Employee("Harry", 20));
        employees.add(new Employee("Hermione", 20));
        employees.add(new Employee("Ron", 10));
        employees.add(new Employee("Harry", 10));
        employees.add(new Employee("Draco", 290));
        employees.add(new Employee("Hermione", 30));
        employees.add(new Employee("Hermione", 10));
        employees.add(new Employee("Draco", 20));
        employees.add(new Employee("Draco", 200));
        System.out.println("\nUnsorted employees:");
        employees.forEach(System.out::println);
        System.out.println("\nSorted employees:");
        employeeSort(employees).forEach(System.out::println);
    }

    static void solution2Test() {
        System.out.println("\nSolution 2 output:");
        List<Integer> integerList = new ArrayList<>();
        for (int i = 1; i <= 30; i++)
            integerList.add(i);
        System.out.println("\nInitial list:\n" + integerList);
        List<List<Integer>> splitList = splitLists(integerList);
        // Odd numbers
        System.out.println("\nOdd numbers (index 0):\n" + splitList.get(0));
        // Even numbers
        System.out.println("\nEven numbers (index 1):\n" + splitList.get(1));
    }

    static void solution3Test() {
        System.out.println("\nSolution 3 output:");
        String test = "hello world";
        String streamString = charStreamToString(test.toCharArray());
        System.out.println("Test case: " + test + "\nStream result: " + streamString + "\nEquivalency test: " + test.equals(streamString));
    }
}

class Employee {

    private String name;
    private Integer age;

    public Employee(String name, Integer age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "[Name=" + name + ", Age=" + age + "]";
    }
}
